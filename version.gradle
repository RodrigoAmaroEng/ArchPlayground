import java.text.SimpleDateFormat

android {
    defaultConfig {
        versionCode getVersionCodeNumber()
        versionName calculateVersion()
    }

    sourceSets {
        nightly.java.srcDirs = sourceSets.release.java.srcDirs
        releaseCandidate.java.srcDirs = sourceSets.release.java.srcDirs
    }

    buildTypes {
        nightly.initWith(buildTypes.release)
        nightly {
            versionNameSuffix "-NB-${getVersionCodeNumber()}${getBuildSuffix()}"
        }
        releaseCandidate.initWith(buildTypes.release)
        releaseCandidate {
            versionNameSuffix "-RC-${getVersionCodeNumber()}${getBuildSuffix()}"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${project.name}_${variant.buildType.name}_${android.defaultConfig.versionName}${variant.buildType.versionNameSuffix ?: ""}.apk"
        }
    }
}


def getBuildSuffix() {
    def nowCal = Calendar.instance
    def dateFormatter = new SimpleDateFormat("MMddHHmm")
    return '.' + dateFormatter.format(nowCal.time)
}


def calculateVersion() {
    Properties data = loadVersionFile()
    def revision = Integer.parseInt(data['FIX'])
    def minor = Integer.parseInt(data['MINOR'])
    def major = Integer.parseInt(data['MAJOR'])
    return "$major.$minor${revision > 0 ? '.' + revision : ''}"
}

def getVersionCodeNumber() {
    return Integer.parseInt(loadVersionFile()['NUMBER'])
}

def loadVersionFile() {
    def versionPropsFile = file("$project.rootDir/version.properties")
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        return versionProps
    } else {
        throw new Exception("Could not read version.properties!")
    }
}

task incrementVersionCode << {
    Properties versionProps = loadVersionFile()
    versionProps['NUMBER'] = (Integer.parseInt(loadVersionFile()['NUMBER']) + 1).toString()
    def properties = new Properties() {
        @Override
        public synchronized Enumeration<Object> keys() {
            return Collections.enumeration(new TreeSet<Object>(super.keySet()))
        }
    }
    properties.putAll(versionProps)
    file("$project.rootDir/version.properties").withOutputStream {
        properties.store(it, null)
    }
}